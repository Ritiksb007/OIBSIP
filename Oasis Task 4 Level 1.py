# -*- coding: utf-8 -*-
"""Task 4 Sentiment Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15D18m8OA6roRTCEdVZdtdAYQJbVOGXDP
"""

import pandas as pd
import numpy as np
import re
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
import matplotlib.pyplot as plt
import seaborn as sns

# Load and Clean the Data
def clean_text(text):
    if isinstance(text, str):
        text = re.sub(r'\W', ' ', text)
        text = re.sub(r'\s+', ' ', text)
        text = text.lower()
    else:
        text = ''
    return text

# Load the dataset
df = pd.read_csv('/content/Twitter_Data.csv')

# Handle missing values
df['clean_text'].fillna('', inplace=True)
df['category'].fillna('unknown', inplace=True)  # Fill missing categories with a placeholder

# Clean the text data
df['clean_text'] = df['clean_text'].apply(clean_text)

# Feature Extraction
vectorizer = TfidfVectorizer(max_features=5000)
X = vectorizer.fit_transform(df['clean_text']).toarray()

y = df['category'].astype(str)

# Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Model Training
model = MultinomialNB()
model.fit(X_train, y_train)

# Model Evaluation
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)
class_report = classification_report(y_test, y_pred)

print(f'Accuracy: {accuracy}')
print('Confusion Matrix:')
print(conf_matrix)
print('Classification Report:')
print(class_report)

# Data Visualization
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

clean_texts = [' '.join(vectorizer.inverse_transform([x])[0]) for x in X_test]
df_test = pd.DataFrame({'clean_text': clean_texts, 'actual': y_test, 'predicted': y_pred})
print(df_test.head(10))